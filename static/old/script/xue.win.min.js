/**
 * XESUI 
 * Copyright 2013 xueersi.com All rights reserved.
 *
 * @description 
 *
 * @author Marco (marco@xesui.com)
 * @modify 2013-07-16 16:42:07
 * @version $Id$
 * 
 * @links http://xesui.com
 *
 */


/**
 * @modify : 2013-07-16
 * @by Marco : 已压缩后放置到xue.js中
 */

/**
 * @name ui.dialog.js
 * @description 全站弹窗
 * 
 * @module 
 * @submodule 
 * @main 
 * @class 
 * @constructor 
 * @static 
 * @example
	xue.use('dialog', function(dialog){
        var b = new dialog({
            id : 'welcome',
            title : 'adaasdfasfd',
            // title : false,
            width : 500,
            // height: 200,
            close: true,
            left:1,
            arrow:'tr',
            // lock:true,
            lockbg : true,
            // ok : function(){
            //     alert(222);
            //     dialog.close();
            // },
            button : [
                {id : 'step', tp : 'submit', text : '下一步', cls : 'btn_red', fn : function(){
                    alert(b.id);
                }},
                {id : 'test', tp : 'test', text : '测试', cls : 'btn_blue', fn : false}


            ],
            // arrow: 'bl',
            cancel : true,
            content : '欢迎来到学而思网校-新版学习中心'
        });

        var a = new dialog({
            id: '123',
            // title:false,
            title:'2334334534',
            // width: 200,
            ok : function(){
                alert(1111);
                dialog.close();
            },
            arrow : 'bl',
            border: false,
            // close:function(){
            //     alert(3333);
            //     a.close();
            // },
            content : 'afafasfasfsfa'
        });
    });
 */

ui.dialog = ui.dialog || function( opt ){
	var o = {};
	/**
	 * 初始化
	 *
	 * 如果opt是{}对象，则进行配置
	 * 如果是字符串，即ID，则检查队列中是否存在，如果存在则设置win.id和win.box为指定id
	 *
	 * 否则直接合并默认配置
	 * 
	 * @type {[type]} 返回ui.dailog对象
	 */
	if(opt && typeof opt === 'object' && opt.length === undefined){

		$.extend(o, ui.dialog.default, opt);
		ui.dialog._init(o);
		return ui.dialog;

	}else if(opt && typeof opt === 'string'){
		var id = 'xuebox_' + opt;
		var item = ui.dialog.queue[id];
		if(item){
			ui.dialog.id = id;
			ui.dialog.box = item.DOM_BOX;
		}
		return ui.dialog;
	}else{
		$.extend(o, ui.dialog.default);
		ui.dialog._init(o);
	}
	

	return ui.dialog;
};

(function () {

	var win = ui.dialog;

	win.id = 'xuebox';

	win.tpl = {
		/**
		 * 弹窗外围容器
		 * @type {String}
		 */
		wrap : '<div id="$id$" class="dialog">$dialog_box$ $dialog_close$ $dialog_arrow$</div>',
		/**
		 * 关闭按钮
		 * @type {String}
		 */
		close : '<a href="javascript:void(0);" class="dialog_close">关闭</a>',
		/**
		 * 指示箭头模板
		 * $arrow_type$ : 按钮位置
		 * 		- tl : 上左
		 * 		- tr : 上右
		 * 		- bl : 下左
		 * 		- br : 下右
		 * @type {String}
		 */
		arrow : '<div id="$id$_arrow" class="dialog_arrow arrow_$arrow_type$"></div>',
		/**
		 * 按钮模版
		 * $btn_id$   : 
		 * $btn_type$ :
		 * $btn_cls$  :
		 * $btn_text$ :
		 * @type {String}
		 */
		// button : '<a data-type="$btn_type$" id="$id$_btn_$btn_id$" class="btn $btn_cls$" href="javascript:void(0);">$btn_text$</a>',
		button : '<button type="button" data-type="$btn_type$" id="$id$_btn_$btn_id$" class="btn $btn_cls$ $btn_type$" href="javascript:void(0);">$btn_text$</button>',
		/**
		 * 弹窗容器table
		 * $id$ : 
		 * $is_title$ : 
		 * $is_buttons$ : 
		 * $title$ :
		 * $content$ : 
		 * $buttons$ : 
		 * $width$ : 
		 * $height$ : 
		 * @type {[type]}
		 */
		box : '<table class="dialog_box">\n'
		+'	<thead><tr class="t"><td class="tl"></td><td class="tc"></td><td class="tr"></td></tr></thead>\n'
		+'	<tbody class="dialog_head $is_title$">\n'
		+'		<tr class="ct">\n'
		+'			<td class="cl"></td>\n'
		+'			<td class="dialog_handle">\n'
		+'				<p class="dialog_title" id="$id$_title">$title$</p>\n'
		+'			</td>\n'
		+'			<td class="cr"></td>\n'
		+'		</tr>\n'
		+'	</tbody>\n'
		+'	<tbody class="dialog_body">\n'
		+'		<tr class="cc">\n'
		+'			<td class="cl"></td>\n'
		+'			<td id="$id$_content" class="dialog_content_wrap"><div class="dialog_content">$content$</div></td>\n'
		+'			<td class="cr"></td>\n'
		+'		</tr>\n'
		+'	</tbody>\n'
		+'	<tbody class="dialog_foot $is_buttons$">\n'
		+'		<tr class="cb">\n'
		+'			<td class="cl"></td>\n'
		+'			<td class="dialog_buttons" id="$id$_buttons">$buttons$</td>\n'
		+'			<td class="cr"></td>\n'
		+'		</tr>\n'
		+'	</tbody>\n'
		+'	<tfoot><tr class="b"><td class="bl"></td><td class="bc"></td><td class="br"></td></tr></tfoot>\n'
		+'</table>\n',
		/**
		 * 背景遮罩
		 */
		mask : '<div class="dialog_mask"></div>'
	};

	/**
	 * 默认配置
	 * @type {Object}
	 */
	win.default = {
		content   : '<div class="aui_loading"><span>loading..</span></div>',
		title     : '\u6d88\u606f',		// 标题. 默认'消息'
		button    : null,				// 自定义按钮
		ok        : null,				// 确定按钮回调函数
		no        : null,				// 取消按钮回调函数
		submit    : null,				// 同 ok
		cancel    : null,				// 同 no
		init      : null,				// 对话框初始化后执行的函数
		close     : null,				// 对话框关闭前执行的函数
		okVal     : '\u786E\u5B9A',		// 确定按钮文本. 默认'确定'
		cancelVal : '\u53D6\u6D88',		// 取消按钮文本. 默认'取消'
		width     : 'auto',				// 内容宽度
		height    : 'auto',				// 内容高度
		minWidth  : 96,					// 最小宽度限制
		minHeight : 32,					// 最小高度限制
		padding   : '20px 25px',		// 内容与边界填充距离
		skin      : '',					// 皮肤名(预留接口,尚未实现)
		icon      : null,				// 消息图标名称
		time      : null,				// 自动关闭时间
		esc       : true,				// 是否支持Esc键关闭
		focus     : true,				// 是否支持对话框按钮自动聚焦
		show      : true,				// 初始化后是否显示对话框
		follow    : null,				// 跟随某元素(即让对话框在元素附近弹出)
		// path      : _path,				// Dialog路径
		lock      : false,				// 是否锁屏
		background: '#000',				// 遮罩颜色
		opacity   : .7,					// 遮罩透明度
		duration  : 300,				// 遮罩透明度渐变动画速度
		fixed     : false,				// 是否静止定位
		left      : null,				// X轴坐标
		top       : null,			// Y轴坐标
		zIndex    : 1000,				// 对话框叠加高度值(重要：此值不能超过浏览器最大限制)
		resize    : true,				// 是否允许用户调节尺寸
		drag      : true,				// 是否允许用户拖动位置，
		border    : true,				// 是否显示边框
		cls       : ''					// dialog外围增加样式：dialog_alert / dialog_win等
	};

	// 设置队列
	win.queue = { /* 'id' : {} */ };


	win._init = function ( opt ) {

		this.id = opt.id ? 'xuebox_' + opt.id : 'xuebox';

		this.queue[this.id] = opt;
		// console.log(opt);
		/* --------------- 获取HTML结构 ------------- */

		var dom = this.tpl.wrap;

		dom = dom.replace('$id$', this.id);

		dom = dom.replace('$dialog_close$', this._getClose());

		dom = dom.replace('$dialog_box$', this._getDOM());

		dom = dom.replace(/\$dialog_arrow\$/, this._getArrow());

		/* --------------- 页面中插入 ------------- */

		if($('#xuebox_' + opt.id).length == 0){
			$(dom).appendTo('body');
			this.box = $('#' + this.id);
		}

		/* --------------- 存储配置 ------------- */
		// 设置DOM节点到队列中
		
		var dom = {
			DOM_BOX     : this.box,
			DOM_CLOSE   : this.box.find('.dialog_close'),
			DOM_CANCEL  : this.box.find('.btn_cancel'),
			DOM_OK      : this.box.find('.btn_ok'),
			DOM_BUTTONS : this.box.find('.dialog_buttons .btn'),
			DOM_TITLE   : this.box.find('.dialog_title'),
			DOM_CONTENT : this.box.find('.dialog_content_wrap')
		};

		this._setOption('DOM_BOX', dom.DOM_BOX);
		this._setOption('DOM_CLOSE', dom.DOM_CLOSE);
		this._setOption('DOM_CANCEL', dom.DOM_CANCEL);
		this._setOption('DOM_OK', dom.DOM_OK);
		this._setOption('DOM_CONTENT', dom.DOM_CONTENT);
		this._setOption('DOM_TITLE', dom.DOM_TITLE);
		this._setOption('DOM_BUTTONS', dom.DOM_BUTTONS);
		this._setOption(dom);

		/* --------------- 事件绑定 ------------- */

		var that = this;

		// 关闭事件
		this._addClick(dom.DOM_CLOSE, opt.close);

		// 取消事件
		this._addClick(dom.DOM_CANCEL, opt.no || opt.cancel);

		
		// 确定事件
		this._addClick(dom.DOM_OK, opt.ok || opt.submit);
		

		// buttons的事件绑定
		// {id, tp, text, cls, fn}
		if(opt.button && opt.button.length > 0){
			$.each(opt.button, function(k, v){
				var _btn = $('#' + that.id + '_btn_' + v.id);
				that._addClick(_btn, v.fn);
			});
		}

		// 给Dialog绑定点击事件，点击后重置Dialog的id和dom值
		dom.DOM_BOX.off('mousedown').on('mousedown', function(){
			that.id = $(this).attr('id');
			that.box = $(this);
		});
		/* --------------- 设置定位和尺寸 ------------- */

		this.resize();
		this(this.id).position();

		/* --------------- 设定背景遮罩 ------------- */
		if(opt.lock){
			var bg = opt.lockbg ? true : false;
			this.lock( bg );
		}

		/* --------------- 判断是否显示边框 ------------- */
		// console.log(opt.id +' : '+ opt.border);
		if(opt.border){
			dom.DOM_BOX.removeClass('dialog_noborder');
		}else{
			dom.DOM_BOX.addClass('dialog_noborder');
		}
		// 如果不存在遮罩，则给所有的弹窗增加1px边框样式
		// if($('.dialog_mask').length == 0){
		// 	$('.dialog').addClass('dialog_noMask');
		// }

		/* --------------- 设置圆角 ------------- */
		// 头部存在的时候增加样式
		if(dom.DOM_BOX.find('.dialog_head:hidden').length >0){
			dom.DOM_CONTENT.addClass('dialog_radius_top');
		}else{
			dom.DOM_CONTENT.removeClass('dialog_radius_top');
		}
		// 底部存在的时候增加样式
		if(dom.DOM_BOX.find('.dialog_foot:hidden').length >0){
			dom.DOM_CONTENT.addClass('dialog_radius_bottom');
		}else{
			dom.DOM_CONTENT.removeClass('dialog_radius_bottom');
		}

		/* --------------- 设置外围样式 ------------- */

		if(opt.cls){
			dom.DOM_BOX.addClass(opt.cls);
		}

	};

	// 获取关闭标签HTML结构
	win._getClose = function( isClose ){
		var opt = this.queue[this.id];
		if(!opt){ return ;}
		var _close = opt.close ? this.tpl.close : '';

		return _close;
	};

	// 获取箭头标签的HTML结构
	win._getArrow = function( tp ){
		var opt = this.queue[this.id];
		if(!opt){ return ;}

		var tp = opt.arrow;
		if(tp){
			var html = win.tpl.arrow;
			tp = tp 
			   ? tp === true ? 'bl' : tp 
			   : 'bl';

			html = html.replace('$arrow_type$', tp);
			return html;
		}else{
			return '';
		}
	};
	// 获取按钮组标签的HTML结构
	win._getButton = function(){
		var opt = this.queue[this.id];
		if(!opt){ return ;}

		/**
		 * 获取button数据
		 *
		 * [
		 * 		{id:'', text:'', tp:'', cls:'', fn}
		 * ]
		 * @type {[type]}
		 */
		var btn = opt.button;
//		'<a data-type="$btn_type$" id="$id$_btn_$btn_id$" class="btn $btn_cls$" href="javascript:void(0);">$btn_text$</a>',
		var tpl = this.tpl.button;

		var btns = '';
		var re = {
			id : /\$id\$/g,
			btn: /\$btn_id\$/,
			type : /\$btn_type\$/g,
			cls : /\$btn_cls\$/,
			text: /\$btn_text\$/,

		};
		if(btn && typeof btn === 'object' && btn.length > 0){
			$.each(btn, function(k, v){
				var _btn = tpl;
				_btn = _btn.replace(re.id, win.id);
				_btn = _btn.replace(re.btn, v.id);
				_btn = _btn.replace(re.type, 'btn_' + v.tp);
				_btn = _btn.replace(re.cls, v.cls);
				_btn = _btn.replace(re.text, v.text);
				btns += _btn;
			});
		}
		// console.log(opt);
		// var _ok = opt.submit || opt.ok
		if(opt.submit || opt.ok){
			var _btn = tpl;
			_btn = _btn.replace(re.type, 'btn_ok');
			_btn = _btn.replace(re.id, win.id);
			_btn = _btn.replace(re.btn, 'ok');
			_btn = _btn.replace(re.cls, 'btn_red');
			_btn = _btn.replace(re.text, opt.submitVal || opt.okVal);
			btns += _btn;
		}
		if(opt.cancel || opt.no){
			var _btn = tpl;
			_btn = _btn.replace(re.type, 'btn_cancel');
			_btn = _btn.replace(re.id, win.id);
			_btn = _btn.replace(re.btn, 'cancel');
			_btn = _btn.replace(re.cls, 'btn_gray');
			_btn = _btn.replace(re.text, opt.cancelVal || opt.noVal);
			btns += _btn;
		}
		return btns;
	};

	// 获取整个中间区域的HTML结构
	win._getDOM = function(){

		var opt = this.queue[this.id];
		if(!opt){ return ;}

		var box = this.tpl.box;
		/*
		 * $id$ : 
		 * $is_title$ : 
		 * $is_buttons$ : 
		 * $title$ :
		 * $content$ : 
		 * $buttons$ : 
		 * $width$ : 
		 * $height$ : 
		 */
		var id, isTitle, isButtons, width, height;
		
		id = this.id || xue.getTime();
		box = box.replace(/\$id\$/g, id);

		/**
		 * title
		 */
		if(opt.title){
			box = box.replace(/\$is_title\$/, '');
			box = box.replace(/\$title\$/, opt.title);
		}else{
			box = box.replace(/\$is_title\$/, 'hidden');
			box = box.replace(/\$title\$/, this.default.title);
		}

		/**
		 * 按钮组
		 */
		var _btn = this._getButton(),
			isbtn = _btn ? '' : 'hidden';
		box = box.replace('$buttons$', this._getButton());
		box = box.replace('$is_buttons$', isbtn);

		/**
		 * 内容区域
		 */
		box = box.replace('$content$', opt.content);

		return box;
	};

	// 向队列中添加属性
	win._setOption = function(key, val, id){
		var id = id || win.id;
		var list = win.queue[id];
		list[key] = val;

		return win.queue;
	};


	/**
	 * 事件绑定
	 * @param  {selector}   expr 要绑定的元素
	 * @param  {Function} fn   要绑定的事件
	 * @return {[type]}        [description]
	 */
	win._addClick = function(expr, fn){
		var box = $(expr).parents('.dialog'),
			id = (box.length > 0) ? box.attr('di') : this.id;
		
		var _fn = (fn && typeof fn === 'function') ? fn : function(d){
			win.close();
		};
		var that = this;
		$(expr).off('click').on('click', function(){
			that.box = $(this).parents('.dialog')
			that.id = that.box.attr('id');

			_fn(this, id);
			
		});

	};

	// 事件绑定
	win._addEvent = function(ev, expr, fn){};

	// 关闭事件
	win.close = function( fn ){
		var opt = this.queue[this.id];
		if(!opt){ return ;}

		this.box.remove();
		if(opt.lock){
			this.unlock();
		}
		delete this.queue[this.id];
	};

	// 设置弹窗的位置
	win.position = function(left, top, id){
		var opt = this.queue[this.id];
		if(!opt){ return ;}
		
		var box = opt.DOM_BOX;
		var pos = {
			left : left || opt.left || ($(window).width() / 2) - (box.width() / 2),
			top  : top  || opt.top  || ($(window).height() / 2) - (box.height() / 2)
		};

		box.css({
			left : pos.left,
			top  : pos.top
		});
		return this;
	};

	// 设置弹窗的大小
	win.resize = function(width, height){
		var opt = this.queue[this.id];
		if(!opt){ return; }

		var box = opt.DOM_BOX;

		var con = box.find('.dialog_content');
		con.css({
			width : width || opt.width,
			height : height || opt.height
		});
		this.position();
		return this;
	};

	// 设置弹窗的层级，默认为1000
	win.zIndex = function(){};

	/**
	 * 设置当前焦点,zindex : 2000
	 *
	 * 其他的Dialog的zindex值设为默认 1000
	 *
	 * 当点击某个的时候，可以激活当前焦点
	 * 
	 * @return {[type]} [description]
	 */
	win.focus = function(){};

	/**
	 * 获取弹窗内容区域
	 * @param  {string} tp 获取类型：html / text / dom
	 * @return {[type]}    根据类型返回：html(HTML内容) / text(文本) / dom(jQuery对象)
	 */
	win.getContent = function( tp ){
		var opt = this.queue[this.id];
		if(!opt){ return ;}

		var DOM = opt.DOM_CONTENT.find('.dialog_content'), con = '';

		if(tp === 'html'){
			con = DOM.html();
		}else if( tp === 'text'){
			con = DOM.text();
		}else{
			con = DOM;
		}

		return con;
	};

	/**
	 * 设置遮罩
	 * @param  {boolen} lockbg 是否显示背景图片（斜线）
	 * @return {[type]}        [description]
	 */
	win.lock = function( lockbg ){
		var mask = $('body').find('.dialog_mask');
		if(mask.length > 0){
			mask.show();
		}else{
			$('body').append(this.tpl.mask);
		}
		if(lockbg){
			$('.dialog_mask').addClass('mask_bg');
		}else{
			$('.dialog_mask').removeClass('mask_bg');
		}
		// $('.dialog').addClass('dialog_noborder');
	};

	/**
	 * 取消遮罩
	 *
	 * 判断当前点击的元素是否有lock，如果没有则不关闭遮罩
	 *
	 * 如果有，还要看关闭后其他弹层中是否有lock，如果有，则还不能关闭遮罩
	 * 
	 * @return {[type]} [description]
	 */
	win.unlock = function(){
		var opt = this.queue[this.id];
		if(opt.lock){
			$('.dialog_mask').remove();			
		}
	};


	win.content = function( msg ){
		var opt = this.queue[this.id];
		if(!opt){ return this; }
		
		var box = opt.DOM_BOX.find('.dialog_content');
		
		box.html(msg);
		this.resize();
		return this;
	};
	win.title = function( title ){
		var opt = this.queue[this.id];
		if(!opt){ return this; }
		
		var box = opt.DOM_BOX.find('.dialog_title');
		
		box.html( title );

		return this;
	};

})();




xue.extend('dialog', ui.dialog);



/* ================== 插件 =================== */

xue.alert = function(msg, fn, tp){
	if(!msg || msg === ''){ return; }
	var ok = fn || true;
	xue.dialog({
		id      : 'alert',
		title   : false,
		lock    : false,
		content : '<div style="text-align:center">' + msg + '</div>',
		ok      : function(){ if(typeof ok === 'function'){ ok(); } xue.dialog('alert').close(); },
		cancel  : true
	});
};
xue.confirm = function(msg, fn1, fn2){
    if(!msg || msg === ''){ return; }
    var ok = fn1 || true, no = fn2 || true;
    xue.dialog({
        id      : 'confirm',
        title   : false,
        lock    : true,
        content : '<div style="text-align:center">' + msg + '</div>',
        ok      : function(){ if(typeof ok === 'function'){ ok(); } xue.dialog('confirm').close(); },
        cancel  : function(){ if(typeof no === 'function'){ no(); } xue.dialog('confirm').close();   }
    });
};

xue.win = xue.dialog;

(function(){
	var w = xue.win;
	var config = {
		id : 'win',
		lock : true,
		close : true,
		title : '标题',
		content : '<div></div>',
		submit : true,
		cancel : true
	};

	$.each(config, function(k, v){
		w.default[k] = v;
	});

})();

