///import xue.boot.js
var xue = xue || {};
xue.isIE6 = xue.isIE6 || /MSIE 6\./.test(navigator.userAgent) && !window.opera;
/*
 * 去除字符串空格
 * 1)去除字符串前后所有空格
 * 2)去除字符串中所有空格(包括中间空格,需要设置第2个参数为:g)
 */
xue.trim = xue.trim || function(str, is_global) {
    var _result;
    _result = str.replace(/(^\s+)|(\s+$)/g, "");
    if (is_global.toLowerCase() == "g")
        _result = _result.replace(/\s/g, "");
    return _result;
};

xue.userAutoComplete = xue.userAutoComplete || {};

(function() {
    var a = xue.userAutoComplete || {};
    a.opt = {
        id: 'xes_autoTips',
        itemCls: 'xes_autoItem',
        curCls: 'autoCurrent',
        curBg: '#FFD4D7',
        userCls: 'xes_username',
        passCls: 'xes_password',
        subCls: 'xes_submit',
        formCls: 'xes_autoForm',
        tips: '请选择邮箱类型',
        isLoad: false,
        formType: 'side',
        current: ''
    };

    //邮箱后缀（按字母顺序排列）
    a.opt.suffix = ['126.com', '139.com', '163.com', '189.cn', 'gmail.com', 'hotmail.com', 'live.cn', 'msn.com', 'qq.com', 'sina.com', 'sina.cn', 'sohu.com', 'vip.sina.com', 'wo.com.cn', 'yahoo.cn'];
    /* 初始化
     * 遍历传入的opt，用其内容替换a.opt里面的内容
     */
    a.init = function(opt) {
        // if (opt) {
        //     // this.opt.isLoad = true;
        //     $.each(opt, function(n, m) {
        //         a.opt[n] = m;
        //     });
        //     //初始化相关dom
        //     a.opt.wrap = '#' + a.opt.id;
        //     a.opt.item = '.' + a.opt.itemCls;
        //     a.opt.username = '.' + a.opt.userCls;
        //     a.opt.password = '.' + a.opt.passCls;
        //     a.opt.submit = '.' + a.opt.subCls;
        //     a.opt.form = '.' + a.opt.formCls;
        // }

        if(!opt){ return; }
        $.extend(a.opt, opt);

        a.opt.wrap = $(a.opt.id);
        a.opt.item = $(a.opt.itemCls);
        a.opt.username = $(a.opt.userCls);
        a.opt.password = $(a.opt.passCls);
        a.opt.submit = $(a.opt.subCls);
        a.opt.form = $(a.opt.formCls);

    };
    /*
     * 设置自动完成html内容
     * param d: 后缀数据内容
     */
    a.getHtml = function(d) {
        var _d = d || this.opt.suffix;
        var _html = '<ul id="' + this.opt.id + '">';
        //note tips
        _html += '<li node-type="note" class="note" style="white-space: nowrap; clear: both; color: #999; cursor: pointer; font-size: 12px; height: 20px; line-height: 20px; list-style: none outside none; margin: 0pt 1px; padding: 0pt 5px;">' + this.opt.tips + '</li>';
        //输入的内容
        _html += '<li node-type="item" email="" title="" class="item ' + this.opt.curCls + '" style="white-space: nowrap; clear: both; color: #999; cursor: pointer; font-size: 12px; height: 20px; line-height: 20px; list-style: none outside none; margin: 0pt 1px; padding: 0pt 5px; background:' + this.opt.curBg + ' none repeat scroll 0% 0%;"></li>'
        //后缀列表
        if (_d.length > 0) {
            for (var i = 0, len = _d.length; i < len; i++) {
                _html += '<li node-type="item" email="' + _d[i] + '" title="@' + _d[i] + '" class="' + this.opt.itemCls + '" style="white-space: nowrap; clear: both; color: #999; cursor: pointer; font-size: 12px; height: 20px; line-height: 20px; list-style: none outside none; margin: 0pt 1px; padding: 0pt 5px;">@' + _d[i] + '</li>';
            }
        }
        _html += '</ul>';
        return _html;
    };
    /*
     * 创建dom
     *
     */
    a.create = function(d) {
        var _html = d || this.getHtml();

        if ($(this.opt.wrap).length == 0) {
            $('body').append(_html);
        }
        $(this.opt.wrap).css({
            'background': 'none repeat scroll 0 0 #FFFFFF',
            'border': '1px solid #CCCCCC',
            'margin': 0,
            'padding': 0,
            'overflow': 'hidden',
            'position': 'absolute',
            'text-align': 'left',
            'display': 'none',
            'width': '177px',
            'z-index': 100
        });
    };
    //
    a.show = function() {
        var _box = $(this.opt.wrap);
        if (_box.lenth == 0) {
            a.create();
        }
        a.setPosition();
        _box.show();
        if (xue.isIE6) {
            $('select').hide();
        }
    };

    //
    a.hide = function() {
        $(this.opt.wrap).hide();
        if (xue.isIE6) {
            $('select').show();
        }
    };

    /*
     * 根据传入的内容设置提示框里面的内容
     * @param v
     * @tips: 这里不计算是否含有@符号，只是单纯的传递@之前的内容
     */
    a.setItemText = function(v) {
        var _item = $(this.opt.item),
            _val = $(this.opt.username).val();
        _item.each(function() {
            var _this = $(this),
                _email = _this.attr('email');
            if (_email == '') {
                _this.text(_val).attr('title', _val);
            } else {
                var _v = v + '@' + _email;
                _this.text(_v).attr('title', _v);
            }
        });
    };

    //设置input值
    a.setInputValue = function(v) {
        var _value = v || a.getCurrent(true);
        $(this.opt.username).val(xue.trim(_value, 'g'));
        a.hide();
        var _form = $(this.opt.form);
        // _form.attr('action', _form.attr('url'));

        if (this.opt.formType == 'side') {
            $(this.opt.password).focus();
        }
        //userlogin
        if (this.opt.formType == 'login') {
            $(this.opt.password).focus();
            $('#loginErrorMsg').text('');
        }
        //register
        if (this.opt.formType == 'register') {
            FormValidation($(this.opt.username)[0]);
            $(this.opt.username).focus();
        }

    };

    /*
     * 设置wrap的位置
     * 根据form的相对位置，设置left和top值
     *
     * @param l
     * @param t
     */
    a.setPosition = function(l, t) {
        var _input = $(this.opt.username),
            _wrap = $(this.opt.wrap),
            x = 0,
            y = 0,
            h = _input.outerHeight();
        if (_input.length > 0) {
            x += l || _input.offset().left;
            y += t || _input.offset().top;
        }
        _wrap.css({
            'top': y + h,
            'left': x
        });
    };

    /*
     * 设置选中状态
     * @param tp {string}:down / up
     */
    a.change = function(tp) {
        var _current = this.getCurrent(),
            _list = $(this.opt.item).filter(':visible'),
            _box = _list.eq(0);

        if (tp == 'down') {
            //获取所有下面同辈可见元素
            var _next = _current.nextAll(':visible');
            //如果不存在下一个则直接跳到第一个
            if (_next.length == 0) {
                _box = _list.first();
            } else {
                _box = _next.eq(0);
            }
        } else if (tp == 'up') {
            //获取之前同辈的可见元素
            var _prev = _current.prevAll(this.opt.item).filter(':visible');
            //如果没有上一个，则直接跳到最后一个
            if (_prev.length == 0) {
                _box = _list.last();
            } else {
                _box = _prev.eq(0);
            }
        }
        this.setCurrent(_box[0]);
    };
    /*
     * 设置选中状态
     * @param d {dom}: 当前选中的dom元素
     */
    a.setCurrent = function(d) {
        $(d).addClass(this.opt.curCls).css('background-color', '#FFD4D7').siblings(this.opt.itemCls).removeClass(this.opt.curCls).css('background', '');
    };

    /*
     * 返回选中的元素
     * @param isVal : true(则返回值)，false(返回元素)
     */
    a.getCurrent = function(isVal) {
        var _cur = $(this.opt.item).filter('.' + this.opt.curCls);
        if (isVal) {
            return _cur.text();
        } else {
            return _cur;
        }
    };
    /*
     * 输入内容过滤
     */
    a.filter = function(v) {
        var _value = $(this.opt.username).val(),
            _val = '';
        //判断输入框中是否存在@
        if (_value.indexOf('@') > -1) {
            var _array = _value.split('@');
            _val = _array[0];

            $(this.opt.item).filter('[email != ""]').each(function() {
                var _this = $(this);
                if (_this.text().indexOf(_value) == 0) {
                    if (_this.text() == _value) {
                        _this.hide();
                    } else {
                        _this.show();
                    }
                } else {
                    _this.hide();
                }
            });

        } else {
            $(this.opt.item).show();
            _val = _value;
        }
        this.setItemText(_val);
    };

    a.loginSubmit = function(tp) {
        // var _user = $(this.opt.username),
        //     _pass = $(this.opt.password),
        //     _submit = $(this.opt.submit),
        //     _form = $(this.opt.form);
        // var _error = $('#loginErrorMsg');
        // if (_user.val() == '' || _user.val() == '用户名/邮箱') {
        //     _error.text('请输入您的用户名！');
        //     _user.focus();
        //     return false;
        // }
        // if (_pass.val() == '') {
        //     _error.text('请输入您的密码！');
        //     _pass.focus();
        //     return false;
        // }
        // $(this.opt.form).off('submit');
        // _form.submit();

    };
    a.sideSubmit = function() {
        // var _user = $(this.opt.username),
        //     _pass = $('.side_userform_password'),
        //     _form = $(this.opt.form);
        // if (_user.val() == '' || _user.val() == '用户名/邮箱') {
        //     alert('请输入您的用户名！');
        //     _user.focus();
        //     return false;
        // }
        // if (_pass.val() == '') {
        //     alert('请输入您的密码');
        //     $(this.opt.password).focus();
        //     return false;
        // }
        // $(this.opt.form).off('submit');
        // xue.app.login.formSubmit();
    };
    /*
     * 设置登录表单中：username、password、submit的样式和自定义类型
     * 方便之后当input onfoucs 事件时可以设置当前input
     *
     * @param u {jQuery Object} : 用户名表单
     * @param p {jQuery Object} : 密码表单
     * @param s {jQuery Object} : 提交按钮
     *
     */
    a.setFormCls = function(u, p, s, tp) {
        u.attr({
            'node-type': 'username',
            'node-site': tp
        }).addClass(this.opt.userCls);
        p.attr('node-type', 'password').addClass(this.opt.passCls);
        s.attr('node-type', 'submit').addClass(this.opt.subCls);
    };
    /*
     * 设置当前激活的表单元素
     * @param d {dom} : 当前焦点状态的input
     */
    a.setForms = function(d) {
        var _user = d,
            _form = $(d).parents('form')[0],
            _pass = $(_form).find(a.opt.passCls),
            _sub = $(_form).find(a.opt.subCls);
        a.opt.username = _user;
        a.opt.password = _pass;
        a.opt.submit = _sub;
        a.opt.form = _form;
        a.opt.formType = $(d).attr('node-site');

        $(_form).off('submit').on('submit', function(event) {
            event.preventDefault();
            return false;
        });

        //side form
        if (this.opt.formType == 'side') {
            a.opt.password.off('keydown').on('keydown', function(e) {
                if (e.keyCode == 13) {
                    a.sideSubmit();
                }
            });
        }
        //userlogin
        if (this.opt.formType == 'login') {
            $(this.opt.password).add(this.opt.submit).off();
            $(this.opt.password).off('keyup').on('keyup', function(e) {
                if (e.keyCode == 13) {
                    a.loginSubmit();
                }
            });
            this.opt.submit.off('click').on('click', function() {
                // a.loginSubmit();
            });
        }
        //register
        if (this.opt.formType == 'register') {
            var _statue = true;
            $('#password, #repassword, #grade, #provisions').off('keyup').on('keyup', function(e) {
                //              $('#password, #repassword, #grade, #code, #provisions').off('keyup').on('keyup',function(e){
                if (e.keyCode == 13) {
                    a.validation.register(this, function(s) {
                        if (s) {
                            $(a.opt.form).submit();
                        }
                    });
                }
            });
            $(this.opt.submit).off('click').on('click', function() {
                a.validation.register(this, function(s) {
                    if (s) {
                        $(a.opt.form).submit();
                        return false;
                    }
                });
            });
        }

    };
    /*
     * 绑定事件
     * @param dom
     * @param el
     * @param func
     *
     * @callback event
     */
    a.monitor = function(dom, ev, callback) {
        if (typeof ev == 'object') {
            $(dom).on(ev);
        } else if (typeof ev == 'string' && typeof callback == 'function') {
            $(dom).on(ev, function() {
                callback(event);
            });
        }

        return this;
    };

    /*
     * key 事件
     * keyCode: 40（向下）38（向上）13（回车）27（ESC）9（tab） 18(alt)  224(commond)
     */
    a.keydown = function(dom, e) {
        var _event = e || window.event,
            keyCode = e.keyCode; //获得键值
        if (keyCode == 13) {
            a.setInputValue();
            return;
        }
        if (keyCode == 27 || keyCode == 9 || keyCode == 224) {
            a.hide();
            return;
        }
        if (keyCode == 40) {
            a.change('down');
            return;
        }
        if (keyCode == 38) {
            a.change('up');
            return;
        }
        if (keyCode != 13 || keyCode != 40 || keyCode != 38 || keyCode != 27 || keyCode != 9 || keyCode != 18 || keyCode != 224) {
            a.show();
            a.filter(dom.value);
            a.setCurrent($(a.opt.item).eq(0));
            return;
        }
    };
    a.ready = function(config) {
        this.init(config);
        var _input = [{ //侧边栏
            username: $('.side_userform_username'),
            password: $('.side_userform_password_tips'),
            submit: $('.side_userform_submit'),
            type: 'side'
        }, { //登录页，登录框
            username: $('#loginForm input[name="data[Cas][username]"]'),
            password: $('#loginForm input[name="data[Cas][password]"]'),
            submit: $('#loginForm .btn_submit'),
            type: 'login'
        }, { //登录页，注册框
            username: $('#userreg input[name="data[email]"]'),
            password: $('#userreg input[name="data[password]"]'),
            submit: $('#userreg img[src$="img/button.jpg"], #userreg img[src$="images/login_button.jpg"]').parent('a'),
            type: 'register'
        }];
        for (var i = 0, len = _input.length; i < len; i++) {
            var _box = _input[i];
            if (_box.username.length > 0) {
                a.setFormCls(_box.username, _box.password, _box.submit, _box.type);
            }
        }

        if ($(this.opt.username).length > 0) {
            $(this.opt.username).attr('autocomplete', 'off');
            this.create();
            $(this.opt.username).off('keydown');
            this.monitor(this.opt.username, {
                'focus': function() {
                    a.setForms(this);
                },
                'keydown': function(e) {
                    var _this = this;
                    setTimeout(function() {
                        a.keydown(_this, e);
                    }, 10);
                },
                'blur': function() {
                    //取消阻止form表单提交的事件绑定
                    $(a.opt.form).off('submit');
                    var _user = $(this);
                    if (this.id == 'email') {
                        FormValidation(this);
                    }
                    // alert(FormValidation($(a.opt.username)[0]));
                    // FormValidation($(a.opt.username)[0]);
                    _user.val(xue.trim(_user.val(), 'g'));
                }
            });
            //绑定email提示列表鼠标滑过事件
            this.monitor(this.opt.item, {
                'mouseover': function() {
                    a.setCurrent(this);
                },
                'click': function() {
                    // a.setCurrent(this);
                    setTimeout(function() {
                        a.setInputValue();
                    }, 0);

                }
            });
            this.monitor($(this.opt.subCls), {
                'click': function(d) {
                    var _form = $(this).parents('form'),
                        _user = _form.find(a.opt.userCls),
                        _type = _user.attr('node-site');
                    if (_type == 'register') {
                        a.validation.register(this, function(s) {
                            if (s) {
                                // _form.submit();
                            }
                        });
                    }
                }
            });
            // var _userloginname = $('#loginForm input[name="data[Cas][username]"]');
            var _userloginname = a.opt.username;
            if (_userloginname.length > 0) {
                _userloginname.focus();
            }
            $('body').on('click', function() {
                a.hide();
            });
        }

    };
    /*
     * 检测
     */
    a.check = function(fn) {
        var result = false;
        try {
            result = typeof fn == 'function' ? true : false;
        } catch (d) {
            result = false;
        }
        return result;
    };
})();


/* /////////////////////////////////////////// */


function userAutoCompleteOnload() {
    var _config = {
        id: 'xes_autoTips',
        itemCls: 'item',
        curCls: 'cur',
        curBg: '#FFD4D7',
        tips: '请选择邮箱类型',
        userCls: 'xes_username',
        passCls: 'xes_password',
        subCls: 'xes_submit',
        formCls: 'xes_autoForm'
    };
    var _autoComplete = xue.userAutoComplete;
    _autoComplete.ready(_config);
    _autoComplete.opt.isLoad = true;   

    // if (window.jQuery) {
    //     _autoComplete.ready(_config);
    //     _autoComplete.opt.isLoad = true;
    // } else {
    //     xue._loadScript(xue.path.js + 'widget/xue.widget.jquery.js', function(s) {
    //         if (s) {
    //             _autoComplete.ready(_config);
    //             _autoComplete.opt.isLoad = true;
    //         }
    //     });
    // }
}
// window.onload = function(){
// 
// };
// $(function() {
    // if (!xue.userAutoComplete.opt.isLoad) {
    //     userAutoCompleteOnload();
    // }
// });