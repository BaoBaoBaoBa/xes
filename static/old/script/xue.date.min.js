/**
 * XESUI 
 * Copyright 2013 xueersi.com All rights reserved.
 *
 * @description 
 *
 * @author Marco (marco@xesui.com)
 * @modify 2013-07-20 12:05:11
 * @version $Id$
 * 
 * @links http://xesui.com
 */


/**
 * @name xue.date.min.js
 * @description 
 * 
 * @module 
 * @submodule 
 * @main 
 * @class 
 * @constructor 
 * @static 
 */

/* -------------------- xes.date.js --------------------- */
/*
 * Date日期处理方法
 * @update : 2012-10-05
 * @author : Marco <Marco.Pai@msn.com>
 * @version: v1.0.0
 */


/**      
* 对Date的扩展，将 Date 转化为指定格式的String      
* 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符      
* 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)      
* eg:      
* (new Date()).pattern("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423      
* (new Date()).pattern("yyyy-MM-dd E HH:mm:ss") ==> 2009-03-10 二 20:09:04      
* (new Date()).pattern("yyyy-MM-dd EE hh:mm:ss") ==> 2009-03-10 周二 08:09:04      
* (new Date()).pattern("yyyy-MM-dd EEE hh:mm:ss") ==> 2009-03-10 星期二 08:09:04      
* (new Date()).pattern("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18   
    
//var date = new Date();      
//window.alert(date.pattern("yyyy-MM-dd hh:mm:ss"));      
*/        
Date.prototype.format=function(fmt) {         
    var o = {         
    "M+" : this.getMonth()+1, //月份         
    "d+" : this.getDate(), //日         
    "h+" : this.getHours()%12 == 0 ? 12 : this.getHours()%12, //小时         
    "H+" : this.getHours(), //小时         
    "m+" : this.getMinutes(), //分         
    "s+" : this.getSeconds(), //秒         
    "q+" : Math.floor((this.getMonth()+3)/3), //季度         
    "S" : this.getMilliseconds() //毫秒         
    };         
    var week = {         
    "0" : "\u65e5",         
    "1" : "\u4e00",         
    "2" : "\u4e8c",         
    "3" : "\u4e09",         
    "4" : "\u56db",         
    "5" : "\u4e94",         
    "6" : "\u516d"        
    };         
    if(/(y+)/.test(fmt)){         
        fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));         
    }         
    if(/(E+)/.test(fmt)){         
        fmt=fmt.replace(RegExp.$1, ((RegExp.$1.length>1) ? (RegExp.$1.length>2 ? "\u661f\u671f" : "\u5468") : "")+week[this.getDay()+""]);         
    }         
    for(var k in o){         
        if(new RegExp("("+ k +")").test(fmt)){         
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));         
        }         
    }         
    return fmt;         
}

xue.date = xue.date || {};

(function(){
    var d = xue.date;
    /**
     * 根据日期获得星期数
     * alert(getWeekday('2012-12-3'))
     */
    d.getWeek = function(sdate){
        var _date = new Date(sdate.replace(/-/g, '/'));
        var _week = ['星期日', '星期一','星期二','星期三','星期四','星期五','星期六'];
        return _week[_date.getDay()];
    };

    d.clock = d.clock || {};
    d.clock.date = '';
    d.clock.dom = '';

    d.clock.count = function(){
        var date = new Date();
        this.year = date.getFullYear();
        this.month = date.getMonth() + 1;
        this.date = date.getDate();
        this.day = new Array("星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六")[date.getDay()];
        this.hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
        this.minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        this.second = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
        this.toString = function() {
            return "现在是:" + this.year + "年" + this.month + "月" + this.date + "日 " + this.hour + ":" + this.minute + ":" + this.second + " " + this.day;
        };
        this.toSimpleDate = function() {
            return this.year + "-" + this.month + "-" + this.date;
        };
        this.toDetailDate = function() {
            return this.year + "-" + this.month + "-" + this.date + " " + this.hour + ":" + this.minute + ":" + this.second;
        };
        this.display = function(ele) {
            var count = new d.clock.count(day);

            var html = count.toDetailDate();
            ele.html(html); 
            window.setTimeout(function() {
                count.display(ele);
            }
            , 1000);
        };
    };

    d.clock.serverClock = function(s_year, s_month, s_day, s_hour, s_min, s_sec) {
        //估计从服务器下载网页到达客户端的延时时间，默认为1秒。 
        var _delay = 1000;

        //服务器端的时间 
        var serverTime = null;
        if(arguments.length == 0) {
            //没有设置服务器端的时间，按当前时间处理 
            serverTime = new Date();
            _delay = 0;
        } else {
            serverTime = new Date(s_year, s_month - 1, s_day, s_hour, s_min, s_sec)
        };

        //客户端浏览器的时间 
        var clientTime = new Date();
        //获取时间差 
        var _diff = serverTime.getTime() - clientTime.getTime();

        //设置从服务器下载网页到达客户端的延时时间，默认为1秒。 
        this.set_delay = function(value) {
            _delay = value;
        };

        //获取服务的日期时间 
        this.get_ServerTime = function(formatstring) {
            clientTime = new Date();
            serverTime.setTime(clientTime.getTime() + _diff + _delay);
            if(formatstring == null) {
                return serverTime;
            }else{
                return serverTime.format(formatstring);
            }
        };
    };

    d.clock.start = function(dom,day){
        var day = dom.text();
        var time = {};
        time.tmp = day.split(' ');
        time.days = time.tmp[0].split('-');
        time.times = time.tmp[1].split(':');

        time.year = time.days[0];
        time.month = time.days[1];
        time.day = time.days[2];

        time.hour = time.times[0];
        time.minute = time.times[1];
        time.second = time.times[2];

        var srvClock = new d.clock.serverClock(time.year, time.month, time.day, time.hour, time.minute, time.second); 

        window.setInterval(function(){ 
            var html = srvClock.get_ServerTime('yyyy-MM-dd HH:mm:ss');
            dom.html(html); 
        },500);

    };

    d.clock.stop = function(){
        clearTimeout(d.clock.timeout);
    };
    /**
     * js日期比较(yyyy-mm-dd)
     * @param  {[type]} a [description]
     * @param  {[type]} b [description]
     * @return {[type]}   [description]
     */
    d.compare = function(a, b){

        var arr = a.split("-");
        var starttime = new Date(arr[0], arr[1], arr[2]);
        var starttimes = starttime.getTime();

        var arrs = b.split("-");
        var lktime = new Date(arrs[0], arrs[1], arrs[2]);
        var lktimes = lktime.getTime();

        if (starttimes > lktimes) {
            // alert('开始时间大于离开时间，请检查');
            return false;
        // 开始日期和结束日期相等时返回2;    
        }else if(starttimes == lktimes){
            return 2;
        }else{
            return true;
        }
    };

    // 剩余时间计算
    d.timeRemain = d.timeRemain || function( opt ){
        var option = {
            time   : 60,
            expr   : null,       //'#wrong_remain'
            tpl    : '$minutes$ : $seconds$',
            stop   : true        // 停止后的回调函数，为了防止复数，则必须为真
        };

        $.extend(option, opt);

        // 防止无回调，则持续计算，出现复数，则必须设置为真
        option.stop = !option.stop ? true : option.stop;

        d.timeRemain.opt = option;

        d.timeRemain.tpl = option.tpl || '$minutes$ 分 $seconds$ 秒';

        d.timeRemain.time = option.time * 60;

        d.timeRemain.box = $(option.expr);

        return this.timeRemain;
    };

    d.timeRemain.count = function(){
        var fn = this.opt.stop;

        if(this.time >= 0){   
            this.minutes = Math.floor(this.time / 60);   
            this.seconds = Math.floor(this.time % 60);  
            var html = this.tpl;
            html = html.replace('$minutes$', this.minutes);
            html = html.replace('$seconds$', this.seconds);

            this.box.text(html); 
            // if(maxtime == 5 * 60) alert('注意，还有5分钟!');  
            // 最后5分钟效果：如果总时间 > 5分钟，则当 == 5的时候变红，如果 总时间 < 5分钟时，则 <= 5时变红
            var _isEnd = (this.opt.time >= 5) ? (this.time == 5 * 60) : (this.time < 5 * 60);
            if(_isEnd){
                this.box.css('color', '#c00');
            }
            this.time--;   
        }else{   
            //如果有回调函数，则返回设置的时间；没有回调则直接弹出提示
            //倒计时不允许不停止，持续计算，所以当时间到了肯定会走到这里
            this.stop(); 
            if(typeof fn == 'function'){
                return fn(this.opt.time);
            }else{
                xue.alert("时间到，结束!");
            }
        }           
    };
    d.timeRemain.start = function(){
        this.timer = setInterval(function(){
            d.timeRemain.count();
        },1000);   
    };
    d.timeRemain.stop  = function(){
        var that = this;
        clearInterval(that.timer);   
    };


    // 时间计算
    d.timeCount = d.timeCount || function( opt ){
        var option = {
            time   : 60,
            expr   : null,       //'#wrong_used'
            tpl    : '$minutes$ : $seconds$',
            stop   : null
        };

        $.extend(option, opt);

        d.timeCount.opt = option;

        d.timeCount.tpl = option.tpl || '$minutes$ 分 $seconds$ 秒';

        d.timeCount.time = 0;

        d.timeCount.box = $(option.expr);
        
        return this.timeCount;
    };

    d.timeCount.count = function( isStop ){

        var fn = this.opt.stop;
        /**
         * 是否有回调（opt.stop)
         * 如果有则根据设置的时间值进行计算，当到时间了停止计算
         * 如果没有回调则一直计算下去
         * @type {Boolean}
         */
        var isStop = fn ? (this.time <= this.opt.time * 60) : true;

        if(isStop){   
            this.minutes = Math.floor(this.time / 60);   
            this.seconds = Math.floor(this.time % 60);  
            var html = this.tpl;
            html = html.replace('$minutes$', this.minutes);
            html = html.replace('$seconds$', this.seconds);

            this.box.text(html); 

            ++this.time;   

        }else{
            // 如果没有回调，是走不进来这里的
            this.stop(); 
            if(typeof fn == 'function'){
                return fn(this.opt.time);
            }
        }  
    };
    d.timeCount.start = function(){
        this.timer = setInterval(function(){
            d.timeCount.count();
        },1000);   
    };
    d.timeCount.stop  = function(){
        var that = this;
        clearInterval(that.timer);   
    };


    // // 倒计时
    // d.countdown = d.countdown || function( opt ){

    //     // var option = {
    //     //     type : 'time',
    //     //     time : 600,
    //     //     expr : ''
    //     // };

    //     d.countdown.timer = 600;
    //     //一个小时，按秒计算，可以自己调整时间
    //     var maxtime = 60*60 
    //     function CountDown()
    //     {   
    //         if(maxtime>=0){   
    //             minutes = Math.floor(maxtime/60);   
    //             seconds = Math.floor(maxtime%60);   
    //             msg = "距离结束还有 "+minutes+" 分 "+seconds+" 秒";   
    //             document.all["timer"].innerHTML=msg;   
    //             if(maxtime == 5*60) alert('注意，还有5分钟!');   
    //             --maxtime;   
    //         }else{   
    //             clearInterval(timer);   
    //             alert("时间到，结束!");   
    //         }   
    //     }   
    //     timer = setInterval("CountDown()",1000);   
    // };

    // d.countdown.time = function( t ){


    // };
    
    // d.countdown.day = function(){};

    // // d.countdown.time.start = function(){};

    // d.countdown.timeout = '';
    // d.countdown.start = function(){};




})();



// //总时间，已分为单位 
// var time = 100;
// //小时 
// var h = parseInt(time / 60) > 0 ? parseInt(time / 60) : 0;
// //分 
// var m = time % 60;
// //秒 
// var s = 60;
// //输出到当前Script的Dom位置 
// document.write('<span>剩余<font id="f_hh">' + h + '</font>小时<font id="f_mm">' + m + '</font>分<font id="f_ss">' + s + '</font>秒</span>');
// //开始执行倒计时 
// var timeInterval = setInterval(function() {
//     //如果时、分、秒都为0时将停止当前的倒计时 
//     if (h == 0 && m == 0 && s == 0) {
//         clearInterval(timeInterval);
//         return;
//     }
//     //当秒走到0时，再次为60秒 
//     if (s == 0) {
//         s = 60;
//     }
//     if (s == 60) {
//         //每次当秒走到60秒时，分钟减一 
//         m -= 1;
//         //当分等于0时并且小时还多余1个小时的时候进里面看看 
//         if (m == 0 && h > 0) {
//             //小时减一 
//             h -= 1;
//             //分钟自动默认为60分 
//             m = 60;
//             //秒自动默认为60秒 
//             s = 60;
//         }
//     }
//     //秒继续跳动，减一 
//     s -= 1;
//     //小时赋值 
//     document.getElementById('f_hh').innerHTML = h;
//     //分钟赋值 
//     document.getElementById('f_mm').innerHTML = m;
//     //秒赋值 
//     document.getElementById('f_ss').innerHTML = s;
// }, 1000);















 
// var interval = 1000;

// function ShowCountDown(year, month, day, divname) {
//     var now = new Date();
//     var endDate = new Date(year, month - 1, day);
//     var leftTime = endDate.getTime() - now.getTime();
//     var leftsecond = parseInt(leftTime / 1000);
//     //var day1=parseInt(leftsecond/(24*60*60*6)); 
//     var day1 = Math.floor(leftsecond / (60 * 60 * 24));
//     var hour = Math.floor((leftsecond - day1 * 24 * 60 * 60) / 3600);
//     var minute = Math.floor((leftsecond - day1 * 24 * 60 * 60 - hour * 3600) / 60);
//     var second = Math.floor(leftsecond - day1 * 24 * 60 * 60 - hour * 3600 - minute * 60);
//     var cc = document.getElementById(divname);
//     cc.innerHTML = "脚本之家提示距离" + year + "年" + month + "月" + day + "日还有：" + day1 + "天" + hour + "小时" + minute + "分" + second + "秒";
// }
// window.setInterval(function() {
//     ShowCountDown(2010, 4, 20, 'divdown1');
// }, interval);